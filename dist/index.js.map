{"version":3,"sources":["dom/extract.ts","dom/operation.ts","dom/walk.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import type { SchemaType, Property } from \"../type/schema\";\n\nexport const getSchemaLabel = (fieldDom: HTMLElement) => {\n  const schemaLabelNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__label__\"]'\n  );\n  return schemaLabelNode?.textContent || \"root\";\n};\n\nexport const getSchemaName = (fieldDom: HTMLElement) => {\n  const schemaNameNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__name__\"]'\n  );\n  return schemaNameNode?.textContent || \"not specified\";\n};\n\nexport const getSchemaType = (fieldDom: HTMLElement): SchemaType => {\n  const schemaTypeNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__type__\"'\n  );\n  return (schemaTypeNode?.textContent as SchemaType) || \"not specified\";\n};\n\nexport const getProperty = (schema: HTMLElement): Property => {\n  return {\n    name: getSchemaName(schema),\n    type: getSchemaType(schema),\n  };\n};\n\nexport const getRootProperty = (schema: HTMLElement): Property => {\n  return {\n    name: getSchemaLabel(schema),\n    type: \"Object\",\n  };\n};\n\nexport const groupingDoms = (nodes: HTMLElement[]) => {\n  // grouping\n  const root = nodes.find((c) => c.className.includes(\"SchemaNode__root\"));\n  const leaves = nodes.filter((c) =>\n    c.className.includes(\"SchemaLeaf__leaf__\")\n  );\n  const groups = nodes.filter((c) => {\n    return c !== root && !leaves.includes(c);\n  }) as HTMLElement[];\n\n  return { root, leaves, groups };\n};\n\nexport const getFieldDoms = ({\n  target,\n  path,\n  level,\n}: {\n  target: Element | null;\n  path: string;\n  level: number;\n}) => {\n  if (level === 1) {\n    return target?.querySelectorAll(`[data-level=\"${level}\"]`);\n  } else {\n    return target?.querySelectorAll(\n      `[data-node-path^=\"${path}\"][data-level=\"${level}\"]`\n    );\n  }\n};\n","const toggle = (element: HTMLElement) => {\n  const button = element.querySelector(\n    '[class ^= \"SchemaNode__symbol__\"]'\n  ) as HTMLElement;\n  button?.click();\n};\n\nexport const open = (element: HTMLElement) => {\n  if (element.ariaExpanded === \"false\") toggle(element);\n};\n\nexport const close = (element: HTMLElement) => {\n  if (element.ariaExpanded === \"true\") toggle(element);\n};\n","import type { SchemaNode } from \"../type/schema\";\nimport { getFieldDoms, getProperty, getSchemaName } from \"./extract\";\nimport { close, open } from \"./operation\";\n\nexport const walk = ({\n  root,\n  group,\n  path,\n  level,\n}: {\n  root: Element;\n  group: HTMLElement;\n  path: string;\n  level: number;\n}) => {\n  open(group);\n  const children = getFieldDoms({\n    target: root,\n    path,\n    level,\n  });\n\n  const property = getProperty(group);\n  const abstract: SchemaNode = {\n    ...property,\n    leaves: [],\n    groups: [],\n    array: [],\n    path,\n  };\n\n  children?.forEach((child) => {\n    const name = getSchemaName(child as HTMLElement);\n    const nextPath = path ? path + \".\" + name : name;\n    const walked = walk({\n      root,\n      group: child as HTMLElement,\n      path: nextPath,\n      level: level + 1,\n    });\n\n    if (walked.type === \"Object\") {\n      abstract.groups?.push(walked);\n    } else if (walked.type === \"array[]\") {\n      abstract.array?.push(walked);\n    } else {\n      abstract.leaves?.push(walked);\n    }\n  });\n  close(group);\n\n  return abstract;\n};\n","import { groupingDoms } from \"./dom/extract\";\nimport { walk } from \"./dom/walk\";\n\nconst main = () => {\n  const tree = document.querySelector('[class ^= \"SchemaTree__tree\"]');\n  if (!tree) {\n    console.log(\n      \"Dom tree is not found. Click any dom element with dev-console\"\n    );\n    return;\n  }\n  const elementList = [...tree.childNodes] as HTMLElement[];\n  const { root, leaves, groups } = groupingDoms(elementList);\n  if (!root) {\n    console.log(\"Root is not found\");\n    return;\n  }\n  console.time();\n  console.log(\"enter\");\n  const schemaTree = walk({ root: tree, group: root, path: \"\", level: 1 });\n  console.log(\"res\", schemaTree);\n  console.timeEnd();\n};\n\nmain();\n"]}