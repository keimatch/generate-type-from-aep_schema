{"version":3,"sources":["extract.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import type { SchemaNode, SchemaType, Property } from \"./types\";\n\nexport const getSchemaLabel = (fieldDom: HTMLElement) => {\n  const schemaLabelNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__label__\"]'\n  );\n  return schemaLabelNode?.textContent || \"root\";\n};\n\nexport const getSchemaName = (fieldDom: HTMLElement) => {\n  const schemaNameNode = fieldDom.querySelector(\n    '[class ^= \"IconTextPair__iconTextPair__\"]'\n  );\n  return schemaNameNode?.textContent || \"not specified\";\n};\n\nexport const getSchemaType = (fieldDom: HTMLElement): SchemaType => {\n  const schemaTypeNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__type__\"'\n  );\n  return (schemaTypeNode?.textContent as SchemaType) || \"not specified\";\n};\n\nexport const getProperty = (schema: HTMLElement): Property => {\n  return {\n    name: getSchemaName(schema),\n    type: getSchemaType(schema),\n  };\n};\n\nexport const getRootProperty = (schema: HTMLElement): Property => {\n  return {\n    name: getSchemaLabel(schema),\n    type: \"Object\",\n  };\n};\n","import type { SchemaNode, SchemaType, Property } from \"./types\";\nimport {\n  getProperty,\n  getRootProperty,\n  getSchemaLabel,\n  getSchemaName,\n  getSchemaType,\n} from \"./extract\";\n\nconst tree = document.querySelector('[class ^= \"SchemaTree__tree\"]');\n\nconst toggle = (element: HTMLElement) => {\n  const button = element.querySelector(\n    '[class ^= \"SchemaNode__symbol__\"]'\n  ) as HTMLElement;\n  button?.click();\n};\n\nconst open = (element: HTMLElement) => {\n  toggle(element);\n};\n\nconst close = (element: HTMLElement) => {\n  toggle(element);\n};\n\nconst isLeaf = () => {\n  return true;\n};\n\nconst groupingDoms = (nodes: HTMLElement[]) => {\n  // grouping\n  const root = nodes.find((c) => c.className.includes(\"SchemaNode__root\"));\n  const leaves = nodes.filter((c) =>\n    c.className.includes(\"SchemaLeaf__leaf__\")\n  );\n  const groups = nodes.filter((c) => {\n    return c !== root && !leaves.includes(c);\n  }) as HTMLElement[];\n\n  return { root, leaves, groups };\n};\n\nconst getFieldDoms = ({ path, level }: { path: string; level: number }) => {\n  const elem = tree?.querySelectorAll(\n    `[data-node-path^=\"${path}\"][data-level=\"${level}\"]`\n  );\n  return elem;\n};\n\nconst walk = ({\n  group,\n  path,\n  level,\n}: {\n  group: HTMLElement;\n  path: string;\n  level: number;\n}) => {\n  open(group);\n  const parentPath = getSchemaName(group);\n  const children = getFieldDoms({ path: parentPath, level });\n  console.log(\"level\", level);\n  console.log(\"children\", children);\n};\n\nconst enter = ({\n  schema,\n  groups,\n  leaves,\n  n = 1,\n}: {\n  schema: HTMLElement;\n  groups: HTMLElement[];\n  leaves: HTMLElement[];\n  n?: number;\n}): SchemaNode => {\n  const property = getRootProperty(schema);\n  const leafProps = leaves?.map((leaf) => getProperty(leaf));\n\n  const topGroup = groups[0];\n  walk({ group: topGroup, path: \"\", level: n + 1 });\n\n  return { ...property, leaves: leafProps };\n};\n\nconst main = () => {\n  if (!tree) return;\n  const elementList = [...tree.childNodes] as HTMLElement[];\n  const { root, leaves, groups } = groupingDoms(elementList);\n  if (!root) return;\n  const res = enter({ schema: root, leaves, groups });\n  console.log(\"res\", res);\n};\n\nmain();\n"]}