{"version":3,"sources":["dom/extract.ts","dom/operation.ts","dom/walk.ts","index.ts"],"names":[],"mappings":"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AA;AFOnC,AEPmC,EDMxC,AEJA,EHKW,ECDP,AEJE,GDFkC,CCE9B,GFIC,AEJE,CFID,GDCY,GAAG,CGLN,CAAC,GDFkB,CDMhB,ECNgB,CFO7B,CEP6B,CDMX,ECNW,EAAA,ACEL,CAAC,EFIA,EAAE,ACNE,EFOhB,CAAI,CEPY,EDMI,CAAC,ACNL,GAAA,CFOS,EAAI,CCDD,CAAC,SCNb,CAAA,ECE2B,CDF3B,ACE4B,ODF5B,GAAA,IAAA,GAAA,IAAA,MAAA,CAAA,cAAA,CAAA,GAAA,EAAA,GAAA,IAAA,KAAA,EAAA,KAAA,EAAA,UAAA,QAAA,YAAA,QAAA,QAAA,oBAAA,GAAA,CAAA,GAAA,IAAA,KAAA,WAAA,GAAA;ADO1C,ACP0C,CDOzC,CDCC,AGLA,IHKM,AGLF,CAAC,EDHmC,ECG/B,EAAE,OHKS,GAAG,CERiB,GAAA,IFQT,CAAC,GERQ,GAAA,GAAA,IFQK,CAC3C,OETsC,CAAA,GAAA,oBAAA,EFSL,CAClC,IEVuC,CAAA,GAAA,iBAAA,GAAA,GAAA,MAAA,CAAA,GAAA;ADOxC,ACPwC,EFWxC,EGPE,GFGF,CAAA,CDIO,AEXiC,CFWjC,CGPE,CFGT,AEHU,GFGV,AEHa,CACT,GFEJ,GCPwC,EFWnB,GEXmB,EAAA,IAAA,IFWjC,IEXiC,OAAA,CAAA,EFWnB,GEXmB,kBAAA,EFWjC,GEXiC,ECK2B,CAChE,QHKkB,CAAE,MEXiB,KFWN,AEXM,KFWF,CEXE,IAAA,GAAA,KAAA,CAAA,CFWa,KEXb,CAAA,WAAA,OAAA,IAAA,KAAA,SAAA,QAAA,GAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,oBAAA,OAAA,CAAA,GAAA,uBAAA,GAAA,YAAA,SAAA,4DAAA,IAAA,gBAAA,MAAA,GAAA,MAAA,EAAA,KAAA;AFY1C,ACHO,ACPA,CFUN,GCHY,ACPA,ACKT,IDLa,CDOC,ECPE,CDOC,QCPR,CDOA,GCPI,CAAA,CDOC,CAAI,ECPL,EAUZ,GDHqC,EAAI;ADG5C,ECFA,ACEG,IDFC,ACPJ,CFSA,CAAA,EETI,GDOO,ACPP,CDOQ,GCPR,CAAJ,GFSA,CETI,EFSJ,ECFwB,KAAK,MDE7B,ACFmC,EAAE,MAAM,CAAC,OAAO,CAAC;ADI/C,ACHP,CAAC,CEFC,EHKW,AEVX,ECKM,GDLD,GAAA,IAAA,CFUmB,AEVxB,ACKiB,GHKU,AGLV,EDLZ,OFUM,SGLM,CAAO,GHKA,CAAI,AGLA,CAAC,OHKoB,EAAgB,CGL1B,CAAkB;AFEzD,EDIA,AGLA,EDLA,EFUM,AGLN,CFCA,CAAA,ACNI,GAAA,EDMJ,ECNI,CDMJ,ACNA,GCKA,CHKoB,AEVhB,CDMJ,CEDiC,CHKV,GGLU,KHKF,CAAC,aAAa,CAC3C,CGN2C,EAAC,WAAW,CAAC,iBHMxB,CACjC;EACD,EEZA,ACIQ,IAAI,CHQJ,AEZH,CFYG,CGRI,CDJP,IAAA,CAAL,KAAK,EFYiB,AGRV,CAAJ,IAAI,QHQJ,cAAc,uBAAd,cAAc,CAAE,WAA0B,KAAI,eAAe;AACvE,CAAC,CENC,ECHc,EDGd,ICHoB,GAAA,QDGhB,EAAC,GCHe,CAAN,CDGJ,CAAC,ICHS;AHSpB,EELA,ECJsB,EDIhB,CFKN,CAAA,EGT4B,GAAA,CDId,GAAG,IFKjB,AELiB,GFKjB,EGT4B,CAAN,MAAM,IHS5B,KEL6B,EAAC;AFOzB,EGVL,EHUW,AENT,ECJE,CAAC,GDIG,CCJC,CDIC,CCJC,EHUW,CENR,EFMW,SAAd,WAAW,CAAI,MAAmB,EAAc;EAC3D,EENE,ACJA,IDII,CFMC,CENL,CCJO,CAAC,EDIJ,CCJO,CAAC,mBAAmB,CAAC;IHWhC,AENA,ACJA,IHUI,CENC,CFMC,CENN,YFMmB,CAAC,MAAM,CAAC;GEL5B,CFMC,AENA,IFMI,EAAE,aAAa,CAAC,MAAM;EEJ5B,ACLA,CHUC,GELK,GCLC,CAAC,IDKM,ACLF,CAAA,CAAE,CDKG,IAAA,oBAAW,EAAC,KAAK,CAAC;AFMrC,CAAC,CELC,ACLA,IDKM,GCLC,CAAC,GAAG,CDKG,ACLF,GDKE,ICLK,CAAC,QDKN,CAAA,aAAA,KACT,QAAQ;AFIb,EGTA,EDME,ECNI,CHSN,CAAA,EEHQ,EAAE,EAAE,ECNI,GHShB,AGTmB,GHSnB,CGTmB,UHSnB,AGTuB,EAAC;AHWnB,IAAM,AEJT,ACPwB,IAAI,EDOtB,ACPwB,EDOtB,EAAE,ACPwB,KHWV,GAAG,SAAlB,eAAe,CAAI,MAAmB,EAAc;EAC/D,EEJE,ACRoC,KHY/B,AEJA,ACRoC,EDQlC,ACRoC,EDQlC,ECRsC;IHa/C,AEJA,ACTiD,IHa7C,AEJA,ACTiD,EHa/C,AEJN,ACTuD,EAAE,YHarC,CAAC,MAAM,CAAC;EEJxB,EFKJ,AEJD,ACV4D,IHcvD,CGd4D,CHc1D,CGd4D;EDYpE,ACZqE,CHepE,AGfsE,CAAC,MDYhE,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC,UAAC,KAAK,EAAI;AFI9B,CAAC,CGfC,EDYE,IAAM,CCZD,CAAC,EDYI,CCZD,CAAC,CDYG,IAAA,ACZE,EAAE,UAAU,CAAC,SDYF,EAAC,KAAoB,CAAC;AFGlD,EGdA,EDYE,GFEF,CAAA,AEFQ,CCZD,CAAC,MDYQ,CCZD,CAAA,CDYI,ACZF,IHcjB,AEFuB,GFEvB,AEF0B,IAAI,GAAG,GAAG,GAAG,EFEvC,EEF2C,GAAG,IAAI;AFI7C,AGfP,CAAC,GHeY,AEHT,IAAM,MAAM,EFGS,CEHN,EFGS,EEHL,CAAC,MFGX,YAAY,CAAI,KAAoB,EAAI;AGbrD,EHcE,EGdE,CAAA,CDWE,ACXA,IDWI,EAAJ,IAAI;EFIR,IAAM,AEHF,IFGM,CEHD,EFGI,AEHF,KFGO,AEHa,CFGZ,IAAI,CAAC,UAAC,CAAC;IAAA,EEFtB,IAAI,CFEuB,CAAC,AEFtB,CFEuB,OEFf,EFEwB,CAAC,QAAQ,CAAC,kBAAkB,CAAC;EAAA,EAAC,EEDpE,KAAK,EAAE,KAAK,GAAG;EFEnB,GEDG,CFCG,AEDF,MFCQ,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,CAAC;IAAA,AEC5B,IAAI,GFAJ,CAAC,CAAC,CEAQ,CAAC,IAAI,GFAJ,CAAC,CEAQ,OFAA,CAAC,AEAO,EAAE,kBFAW,CAAC;EAAA,EAC3C,EED+B,IAAA,gBAAA;EFEhC,IAAM,AEDF,CAAA,KFCQ,GAAG,KAAK,CAAC,EEDjB,GAAA,CFCuB,CAAC,MEDhB,CAAC,GFCgB,CAAC,EAAI,AEDf,cAAA,gBAAA,uBAAf,gBAAA,CAAiB,IAAI,CAAC,MAAM,CAAC;IFE/B,CEDC,MFCM,AEDA,CFCC,GEDG,EFCE,IAAI,AEDA,CAAC,GFCG,CAAC,AEDA,KAAK,CFCC,CAAC,OEDO,CFCC,CAAC,AEDA,CFCC,CAAC;EAC1C,CAAC,CAAkB,EEFqB,IAAA,eAAA;EFIxC,IEHI,CAAA,EFGG,aEHH,GAAA,QAAQ,CAAC,KAAK,cAAA,eAAA,uBAAd,eAAA,CAAgB,IAAI,CAAC,MAAM,CAAC;IFGvB,CEFN,GFEU,EAAJ,CEFA,GFEI;IAAE,EEFN,IFEY,AEFZ,EFEM,MAAM,QEFZ;IFEc,EEDnB,CAAA,GFCyB,EAAN,WEDnB,GAAA,QAAQ,CAAC,MAAM,cAAA,gBAAA,uBAAf,gBAAA,CAAiB,IAAI,CAAC,MAAM,CAAC;EFCJ,CAAE;AACjC,CAAC,CEAC,CAAC,CAAC;AFAF,EECA,IAAA,CFDA,CAAA,YAAA,EECK,CFDL,CECM,KAAK,CAAC,KFDZ;AAEK,EECL,EFDW,KECJ,OFDgB,CECR,EFDW,SAAf,YAAY,CAAA,IAAA,EAQpB;AENL,CAAC,CFMI,IAPH,MAAM,GAAA,IAAA,CAAN,MAAM;AECN,IFAA,GEAA,CFAI,AEAJ,GFAI,CEAJ,GFAI,AEAJ,CFAA,GEAA,CFAI;IACJ,KAAK,GAAA,IAAA,CAAL,KAAK;EAML,IAAI,KAAK,KAAK,CAAC,EAAE;IACf,OAAO,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,gBAAgB,kBAAA,MAAA,CAAiB,KAAK,QAAI,CAAC;GAC3D,MAAM;IACL,OAAO,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,gBAAgB,uBAAA,MAAA,CACR,IAAI,uBAAA,MAAA,CAAkB,KAAK,QAAI,CACrD;;AAEL,CAAC;AAAC,OAAA,CAAA,YAAA,GAAA,YAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["import type { SchemaType, Property } from \"../type/schema\";\n\nexport const getSchemaLabel = (fieldDom: HTMLElement) => {\n  const schemaLabelNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__label__\"]'\n  );\n  return schemaLabelNode?.textContent || \"root\";\n};\n\nexport const getSchemaName = (fieldDom: HTMLElement) => {\n  const schemaNameNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__name__\"]'\n  );\n  return schemaNameNode?.textContent || \"not specified\";\n};\n\nexport const getSchemaType = (fieldDom: HTMLElement): SchemaType => {\n  const schemaTypeNode = fieldDom.querySelector(\n    '[class ^= \"SchemaNode__type__\"'\n  );\n  return (schemaTypeNode?.textContent as SchemaType) || \"not specified\";\n};\n\nexport const getProperty = (schema: HTMLElement): Property => {\n  return {\n    name: getSchemaName(schema),\n    type: getSchemaType(schema),\n  };\n};\n\nexport const getRootProperty = (schema: HTMLElement): Property => {\n  return {\n    name: getSchemaLabel(schema),\n    type: \"Object\",\n  };\n};\n\nexport const groupingDoms = (nodes: HTMLElement[]) => {\n  // grouping\n  const root = nodes.find((c) => c.className.includes(\"SchemaNode__root\"));\n  const leaves = nodes.filter((c) =>\n    c.className.includes(\"SchemaLeaf__leaf__\")\n  );\n  const groups = nodes.filter((c) => {\n    return c !== root && !leaves.includes(c);\n  }) as HTMLElement[];\n\n  return { root, leaves, groups };\n};\n\nexport const getFieldDoms = ({\n  target,\n  path,\n  level,\n}: {\n  target: Element | null;\n  path: string;\n  level: number;\n}) => {\n  if (level === 1) {\n    return target?.querySelectorAll(`[data-level=\"${level}\"]`);\n  } else {\n    return target?.querySelectorAll(\n      `[data-node-path^=\"${path}\"][data-level=\"${level}\"]`\n    );\n  }\n};\n","const toggle = (element: HTMLElement) => {\n  const button = element.querySelector(\n    '[class ^= \"SchemaNode__symbol__\"]'\n  ) as HTMLElement;\n  button?.click();\n};\n\nexport const open = (element: HTMLElement) => {\n  if (element.ariaExpanded === \"false\") toggle(element);\n};\n\nexport const close = (element: HTMLElement) => {\n  if (element.ariaExpanded === \"true\") toggle(element);\n};\n","import type { SchemaNode } from \"../type/schema\";\nimport { getFieldDoms, getProperty, getSchemaName } from \"./extract\";\nimport { close, open } from \"./operation\";\n\nexport const walk = ({\n  root,\n  group,\n  path,\n  level,\n}: {\n  root: Element;\n  group: HTMLElement;\n  path: string;\n  level: number;\n}) => {\n  open(group);\n  const children = getFieldDoms({\n    target: root,\n    path,\n    level,\n  });\n\n  const property = getProperty(group);\n  const abstract: SchemaNode = {\n    ...property,\n    leaves: [],\n    groups: [],\n    array: [],\n    path,\n  };\n\n  children?.forEach((child) => {\n    const name = getSchemaName(child as HTMLElement);\n    const nextPath = path ? path + \".\" + name : name;\n    const walked = walk({\n      root,\n      group: child as HTMLElement,\n      path: nextPath,\n      level: level + 1,\n    });\n\n    if (walked.type === \"Object\") {\n      abstract.groups?.push(walked);\n    } else if (walked.type === \"array[]\") {\n      abstract.array?.push(walked);\n    } else {\n      abstract.leaves?.push(walked);\n    }\n  });\n  close(group);\n\n  return abstract;\n};\n","import { groupingDoms } from \"./dom/extract\";\nimport { walk } from \"./dom/walk\";\n\nconst main = () => {\n  const tree = document.querySelector('[class ^= \"SchemaTree__tree\"]');\n  if (!tree) {\n    console.log(\n      \"Dom tree is not found. Click any dom element with dev-console\"\n    );\n    return;\n  }\n  const elementList = [...tree.childNodes] as HTMLElement[];\n  const { root, leaves, groups } = groupingDoms(elementList);\n  if (!root) {\n    console.log(\"Root is not found\");\n    return;\n  }\n  console.time();\n  console.log(\"enter\");\n  const schemaTree = walk({ root: tree, group: root, path: \"\", level: 1 });\n  console.log(\"res\", schemaTree);\n  console.timeEnd();\n};\n\nmain();\n"]}